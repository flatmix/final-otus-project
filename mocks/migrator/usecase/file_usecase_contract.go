// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	usecase "github.com/flatmix/final-otus-project/internal/migrator/usecase"
	mock "github.com/stretchr/testify/mock"
)

// FileUsecaseContract is an autogenerated mock type for the FileUsecaseContract type
type FileUsecaseContract struct {
	mock.Mock
}

type FileUsecaseContract_Expecter struct {
	mock *mock.Mock
}

func (_m *FileUsecaseContract) EXPECT() *FileUsecaseContract_Expecter {
	return &FileUsecaseContract_Expecter{mock: &_m.Mock}
}

// GetAllMigrationFile provides a mock function with given fields:
func (_m *FileUsecaseContract) GetAllMigrationFile() ([]usecase.FileStruct, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllMigrationFile")
	}

	var r0 []usecase.FileStruct
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]usecase.FileStruct, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []usecase.FileStruct); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]usecase.FileStruct)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileUsecaseContract_GetAllMigrationFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllMigrationFile'
type FileUsecaseContract_GetAllMigrationFile_Call struct {
	*mock.Call
}

// GetAllMigrationFile is a helper method to define mock.On call
func (_e *FileUsecaseContract_Expecter) GetAllMigrationFile() *FileUsecaseContract_GetAllMigrationFile_Call {
	return &FileUsecaseContract_GetAllMigrationFile_Call{Call: _e.mock.On("GetAllMigrationFile")}
}

func (_c *FileUsecaseContract_GetAllMigrationFile_Call) Run(run func()) *FileUsecaseContract_GetAllMigrationFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FileUsecaseContract_GetAllMigrationFile_Call) Return(_a0 []usecase.FileStruct, _a1 error) *FileUsecaseContract_GetAllMigrationFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileUsecaseContract_GetAllMigrationFile_Call) RunAndReturn(run func() ([]usecase.FileStruct, error)) *FileUsecaseContract_GetAllMigrationFile_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllMigrationFileMap provides a mock function with given fields:
func (_m *FileUsecaseContract) GetAllMigrationFileMap() (usecase.FilesMap, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllMigrationFileMap")
	}

	var r0 usecase.FilesMap
	var r1 error
	if rf, ok := ret.Get(0).(func() (usecase.FilesMap, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() usecase.FilesMap); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(usecase.FilesMap)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileUsecaseContract_GetAllMigrationFileMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllMigrationFileMap'
type FileUsecaseContract_GetAllMigrationFileMap_Call struct {
	*mock.Call
}

// GetAllMigrationFileMap is a helper method to define mock.On call
func (_e *FileUsecaseContract_Expecter) GetAllMigrationFileMap() *FileUsecaseContract_GetAllMigrationFileMap_Call {
	return &FileUsecaseContract_GetAllMigrationFileMap_Call{Call: _e.mock.On("GetAllMigrationFileMap")}
}

func (_c *FileUsecaseContract_GetAllMigrationFileMap_Call) Run(run func()) *FileUsecaseContract_GetAllMigrationFileMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FileUsecaseContract_GetAllMigrationFileMap_Call) Return(_a0 usecase.FilesMap, _a1 error) *FileUsecaseContract_GetAllMigrationFileMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileUsecaseContract_GetAllMigrationFileMap_Call) RunAndReturn(run func() (usecase.FilesMap, error)) *FileUsecaseContract_GetAllMigrationFileMap_Call {
	_c.Call.Return(run)
	return _c
}

// GetDownPart provides a mock function with given fields: fileStruct
func (_m *FileUsecaseContract) GetDownPart(fileStruct usecase.FileStruct) (string, error) {
	ret := _m.Called(fileStruct)

	if len(ret) == 0 {
		panic("no return value specified for GetDownPart")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(usecase.FileStruct) (string, error)); ok {
		return rf(fileStruct)
	}
	if rf, ok := ret.Get(0).(func(usecase.FileStruct) string); ok {
		r0 = rf(fileStruct)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(usecase.FileStruct) error); ok {
		r1 = rf(fileStruct)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileUsecaseContract_GetDownPart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDownPart'
type FileUsecaseContract_GetDownPart_Call struct {
	*mock.Call
}

// GetDownPart is a helper method to define mock.On call
//   - fileStruct usecase.FileStruct
func (_e *FileUsecaseContract_Expecter) GetDownPart(fileStruct interface{}) *FileUsecaseContract_GetDownPart_Call {
	return &FileUsecaseContract_GetDownPart_Call{Call: _e.mock.On("GetDownPart", fileStruct)}
}

func (_c *FileUsecaseContract_GetDownPart_Call) Run(run func(fileStruct usecase.FileStruct)) *FileUsecaseContract_GetDownPart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(usecase.FileStruct))
	})
	return _c
}

func (_c *FileUsecaseContract_GetDownPart_Call) Return(_a0 string, _a1 error) *FileUsecaseContract_GetDownPart_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileUsecaseContract_GetDownPart_Call) RunAndReturn(run func(usecase.FileStruct) (string, error)) *FileUsecaseContract_GetDownPart_Call {
	_c.Call.Return(run)
	return _c
}

// GetHash provides a mock function with given fields: fileName
func (_m *FileUsecaseContract) GetHash(fileName string) (string, error) {
	ret := _m.Called(fileName)

	if len(ret) == 0 {
		panic("no return value specified for GetHash")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(fileName)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(fileName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileUsecaseContract_GetHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHash'
type FileUsecaseContract_GetHash_Call struct {
	*mock.Call
}

// GetHash is a helper method to define mock.On call
//   - fileName string
func (_e *FileUsecaseContract_Expecter) GetHash(fileName interface{}) *FileUsecaseContract_GetHash_Call {
	return &FileUsecaseContract_GetHash_Call{Call: _e.mock.On("GetHash", fileName)}
}

func (_c *FileUsecaseContract_GetHash_Call) Run(run func(fileName string)) *FileUsecaseContract_GetHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *FileUsecaseContract_GetHash_Call) Return(_a0 string, _a1 error) *FileUsecaseContract_GetHash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileUsecaseContract_GetHash_Call) RunAndReturn(run func(string) (string, error)) *FileUsecaseContract_GetHash_Call {
	_c.Call.Return(run)
	return _c
}

// GetUpPart provides a mock function with given fields: fileStruct
func (_m *FileUsecaseContract) GetUpPart(fileStruct usecase.FileStruct) (string, error) {
	ret := _m.Called(fileStruct)

	if len(ret) == 0 {
		panic("no return value specified for GetUpPart")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(usecase.FileStruct) (string, error)); ok {
		return rf(fileStruct)
	}
	if rf, ok := ret.Get(0).(func(usecase.FileStruct) string); ok {
		r0 = rf(fileStruct)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(usecase.FileStruct) error); ok {
		r1 = rf(fileStruct)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileUsecaseContract_GetUpPart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUpPart'
type FileUsecaseContract_GetUpPart_Call struct {
	*mock.Call
}

// GetUpPart is a helper method to define mock.On call
//   - fileStruct usecase.FileStruct
func (_e *FileUsecaseContract_Expecter) GetUpPart(fileStruct interface{}) *FileUsecaseContract_GetUpPart_Call {
	return &FileUsecaseContract_GetUpPart_Call{Call: _e.mock.On("GetUpPart", fileStruct)}
}

func (_c *FileUsecaseContract_GetUpPart_Call) Run(run func(fileStruct usecase.FileStruct)) *FileUsecaseContract_GetUpPart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(usecase.FileStruct))
	})
	return _c
}

func (_c *FileUsecaseContract_GetUpPart_Call) Return(_a0 string, _a1 error) *FileUsecaseContract_GetUpPart_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileUsecaseContract_GetUpPart_Call) RunAndReturn(run func(usecase.FileStruct) (string, error)) *FileUsecaseContract_GetUpPart_Call {
	_c.Call.Return(run)
	return _c
}

// NewFileUsecaseContract creates a new instance of FileUsecaseContract. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileUsecaseContract(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileUsecaseContract {
	mock := &FileUsecaseContract{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
