// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	storage "github.com/flatmix/final-otus-project/internal/migrator/storage"
	mock "github.com/stretchr/testify/mock"

	usecase "github.com/flatmix/final-otus-project/internal/migrator/usecase"
)

// DBUsecaseContract is an autogenerated mock type for the DBUsecaseContract type
type DBUsecaseContract struct {
	mock.Mock
}

type DBUsecaseContract_Expecter struct {
	mock *mock.Mock
}

func (_m *DBUsecaseContract) EXPECT() *DBUsecaseContract_Expecter {
	return &DBUsecaseContract_Expecter{mock: &_m.Mock}
}

// CreateMigration provides a mock function with given fields: ctx, file, version
func (_m *DBUsecaseContract) CreateMigration(ctx context.Context, file usecase.FileStruct, version int) error {
	ret := _m.Called(ctx, file, version)

	if len(ret) == 0 {
		panic("no return value specified for CreateMigration")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.FileStruct, int) error); ok {
		r0 = rf(ctx, file, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DBUsecaseContract_CreateMigration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMigration'
type DBUsecaseContract_CreateMigration_Call struct {
	*mock.Call
}

// CreateMigration is a helper method to define mock.On call
//   - ctx context.Context
//   - file usecase.FileStruct
//   - version int
func (_e *DBUsecaseContract_Expecter) CreateMigration(ctx interface{}, file interface{}, version interface{}) *DBUsecaseContract_CreateMigration_Call {
	return &DBUsecaseContract_CreateMigration_Call{Call: _e.mock.On("CreateMigration", ctx, file, version)}
}

func (_c *DBUsecaseContract_CreateMigration_Call) Run(run func(ctx context.Context, file usecase.FileStruct, version int)) *DBUsecaseContract_CreateMigration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(usecase.FileStruct), args[2].(int))
	})
	return _c
}

func (_c *DBUsecaseContract_CreateMigration_Call) Return(_a0 error) *DBUsecaseContract_CreateMigration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DBUsecaseContract_CreateMigration_Call) RunAndReturn(run func(context.Context, usecase.FileStruct, int) error) *DBUsecaseContract_CreateMigration_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMigrationsTable provides a mock function with given fields: ctx
func (_m *DBUsecaseContract) CreateMigrationsTable(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateMigrationsTable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DBUsecaseContract_CreateMigrationsTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMigrationsTable'
type DBUsecaseContract_CreateMigrationsTable_Call struct {
	*mock.Call
}

// CreateMigrationsTable is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DBUsecaseContract_Expecter) CreateMigrationsTable(ctx interface{}) *DBUsecaseContract_CreateMigrationsTable_Call {
	return &DBUsecaseContract_CreateMigrationsTable_Call{Call: _e.mock.On("CreateMigrationsTable", ctx)}
}

func (_c *DBUsecaseContract_CreateMigrationsTable_Call) Run(run func(ctx context.Context)) *DBUsecaseContract_CreateMigrationsTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *DBUsecaseContract_CreateMigrationsTable_Call) Return(_a0 error) *DBUsecaseContract_CreateMigrationsTable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DBUsecaseContract_CreateMigrationsTable_Call) RunAndReturn(run func(context.Context) error) *DBUsecaseContract_CreateMigrationsTable_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMigration provides a mock function with given fields: ctx, file
func (_m *DBUsecaseContract) DeleteMigration(ctx context.Context, file usecase.FileStruct) error {
	ret := _m.Called(ctx, file)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMigration")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.FileStruct) error); ok {
		r0 = rf(ctx, file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DBUsecaseContract_DeleteMigration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMigration'
type DBUsecaseContract_DeleteMigration_Call struct {
	*mock.Call
}

// DeleteMigration is a helper method to define mock.On call
//   - ctx context.Context
//   - file usecase.FileStruct
func (_e *DBUsecaseContract_Expecter) DeleteMigration(ctx interface{}, file interface{}) *DBUsecaseContract_DeleteMigration_Call {
	return &DBUsecaseContract_DeleteMigration_Call{Call: _e.mock.On("DeleteMigration", ctx, file)}
}

func (_c *DBUsecaseContract_DeleteMigration_Call) Run(run func(ctx context.Context, file usecase.FileStruct)) *DBUsecaseContract_DeleteMigration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(usecase.FileStruct))
	})
	return _c
}

func (_c *DBUsecaseContract_DeleteMigration_Call) Return(_a0 error) *DBUsecaseContract_DeleteMigration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DBUsecaseContract_DeleteMigration_Call) RunAndReturn(run func(context.Context, usecase.FileStruct) error) *DBUsecaseContract_DeleteMigration_Call {
	_c.Call.Return(run)
	return _c
}

// ExistTable provides a mock function with given fields: ctx, schema, table
func (_m *DBUsecaseContract) ExistTable(ctx context.Context, schema string, table string) bool {
	ret := _m.Called(ctx, schema, table)

	if len(ret) == 0 {
		panic("no return value specified for ExistTable")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, schema, table)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DBUsecaseContract_ExistTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExistTable'
type DBUsecaseContract_ExistTable_Call struct {
	*mock.Call
}

// ExistTable is a helper method to define mock.On call
//   - ctx context.Context
//   - schema string
//   - table string
func (_e *DBUsecaseContract_Expecter) ExistTable(ctx interface{}, schema interface{}, table interface{}) *DBUsecaseContract_ExistTable_Call {
	return &DBUsecaseContract_ExistTable_Call{Call: _e.mock.On("ExistTable", ctx, schema, table)}
}

func (_c *DBUsecaseContract_ExistTable_Call) Run(run func(ctx context.Context, schema string, table string)) *DBUsecaseContract_ExistTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DBUsecaseContract_ExistTable_Call) Return(_a0 bool) *DBUsecaseContract_ExistTable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DBUsecaseContract_ExistTable_Call) RunAndReturn(run func(context.Context, string, string) bool) *DBUsecaseContract_ExistTable_Call {
	_c.Call.Return(run)
	return _c
}

// GetActualVersion provides a mock function with given fields: ctx
func (_m *DBUsecaseContract) GetActualVersion(ctx context.Context) int {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetActualVersion")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// DBUsecaseContract_GetActualVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActualVersion'
type DBUsecaseContract_GetActualVersion_Call struct {
	*mock.Call
}

// GetActualVersion is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DBUsecaseContract_Expecter) GetActualVersion(ctx interface{}) *DBUsecaseContract_GetActualVersion_Call {
	return &DBUsecaseContract_GetActualVersion_Call{Call: _e.mock.On("GetActualVersion", ctx)}
}

func (_c *DBUsecaseContract_GetActualVersion_Call) Run(run func(ctx context.Context)) *DBUsecaseContract_GetActualVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *DBUsecaseContract_GetActualVersion_Call) Return(_a0 int) *DBUsecaseContract_GetActualVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DBUsecaseContract_GetActualVersion_Call) RunAndReturn(run func(context.Context) int) *DBUsecaseContract_GetActualVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllMigrationsOrderByVersionDesc provides a mock function with given fields: ctx, step
func (_m *DBUsecaseContract) GetAllMigrationsOrderByVersionDesc(ctx context.Context, step int) (storage.MigrationsDBStruct, error) {
	ret := _m.Called(ctx, step)

	if len(ret) == 0 {
		panic("no return value specified for GetAllMigrationsOrderByVersionDesc")
	}

	var r0 storage.MigrationsDBStruct
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (storage.MigrationsDBStruct, error)); ok {
		return rf(ctx, step)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) storage.MigrationsDBStruct); ok {
		r0 = rf(ctx, step)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.MigrationsDBStruct)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, step)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBUsecaseContract_GetAllMigrationsOrderByVersionDesc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllMigrationsOrderByVersionDesc'
type DBUsecaseContract_GetAllMigrationsOrderByVersionDesc_Call struct {
	*mock.Call
}

// GetAllMigrationsOrderByVersionDesc is a helper method to define mock.On call
//   - ctx context.Context
//   - step int
func (_e *DBUsecaseContract_Expecter) GetAllMigrationsOrderByVersionDesc(ctx interface{}, step interface{}) *DBUsecaseContract_GetAllMigrationsOrderByVersionDesc_Call {
	return &DBUsecaseContract_GetAllMigrationsOrderByVersionDesc_Call{Call: _e.mock.On("GetAllMigrationsOrderByVersionDesc", ctx, step)}
}

func (_c *DBUsecaseContract_GetAllMigrationsOrderByVersionDesc_Call) Run(run func(ctx context.Context, step int)) *DBUsecaseContract_GetAllMigrationsOrderByVersionDesc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *DBUsecaseContract_GetAllMigrationsOrderByVersionDesc_Call) Return(_a0 storage.MigrationsDBStruct, _a1 error) *DBUsecaseContract_GetAllMigrationsOrderByVersionDesc_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DBUsecaseContract_GetAllMigrationsOrderByVersionDesc_Call) RunAndReturn(run func(context.Context, int) (storage.MigrationsDBStruct, error)) *DBUsecaseContract_GetAllMigrationsOrderByVersionDesc_Call {
	_c.Call.Return(run)
	return _c
}

// GetMigrationRow provides a mock function with given fields: ctx, file
func (_m *DBUsecaseContract) GetMigrationRow(ctx context.Context, file usecase.FileStruct) (*storage.MigrationDBStruct, error) {
	ret := _m.Called(ctx, file)

	if len(ret) == 0 {
		panic("no return value specified for GetMigrationRow")
	}

	var r0 *storage.MigrationDBStruct
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.FileStruct) (*storage.MigrationDBStruct, error)); ok {
		return rf(ctx, file)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usecase.FileStruct) *storage.MigrationDBStruct); ok {
		r0 = rf(ctx, file)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.MigrationDBStruct)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, usecase.FileStruct) error); ok {
		r1 = rf(ctx, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBUsecaseContract_GetMigrationRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMigrationRow'
type DBUsecaseContract_GetMigrationRow_Call struct {
	*mock.Call
}

// GetMigrationRow is a helper method to define mock.On call
//   - ctx context.Context
//   - file usecase.FileStruct
func (_e *DBUsecaseContract_Expecter) GetMigrationRow(ctx interface{}, file interface{}) *DBUsecaseContract_GetMigrationRow_Call {
	return &DBUsecaseContract_GetMigrationRow_Call{Call: _e.mock.On("GetMigrationRow", ctx, file)}
}

func (_c *DBUsecaseContract_GetMigrationRow_Call) Run(run func(ctx context.Context, file usecase.FileStruct)) *DBUsecaseContract_GetMigrationRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(usecase.FileStruct))
	})
	return _c
}

func (_c *DBUsecaseContract_GetMigrationRow_Call) Return(_a0 *storage.MigrationDBStruct, _a1 error) *DBUsecaseContract_GetMigrationRow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DBUsecaseContract_GetMigrationRow_Call) RunAndReturn(run func(context.Context, usecase.FileStruct) (*storage.MigrationDBStruct, error)) *DBUsecaseContract_GetMigrationRow_Call {
	_c.Call.Return(run)
	return _c
}

// Migrate provides a mock function with given fields: ctx, migrateSQLString
func (_m *DBUsecaseContract) Migrate(ctx context.Context, migrateSQLString string) error {
	ret := _m.Called(ctx, migrateSQLString)

	if len(ret) == 0 {
		panic("no return value specified for Migrate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, migrateSQLString)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DBUsecaseContract_Migrate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Migrate'
type DBUsecaseContract_Migrate_Call struct {
	*mock.Call
}

// Migrate is a helper method to define mock.On call
//   - ctx context.Context
//   - migrateSQLString string
func (_e *DBUsecaseContract_Expecter) Migrate(ctx interface{}, migrateSQLString interface{}) *DBUsecaseContract_Migrate_Call {
	return &DBUsecaseContract_Migrate_Call{Call: _e.mock.On("Migrate", ctx, migrateSQLString)}
}

func (_c *DBUsecaseContract_Migrate_Call) Run(run func(ctx context.Context, migrateSQLString string)) *DBUsecaseContract_Migrate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DBUsecaseContract_Migrate_Call) Return(_a0 error) *DBUsecaseContract_Migrate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DBUsecaseContract_Migrate_Call) RunAndReturn(run func(context.Context, string) error) *DBUsecaseContract_Migrate_Call {
	_c.Call.Return(run)
	return _c
}

// NewDBUsecaseContract creates a new instance of DBUsecaseContract. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDBUsecaseContract(t interface {
	mock.TestingT
	Cleanup(func())
}) *DBUsecaseContract {
	mock := &DBUsecaseContract{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
